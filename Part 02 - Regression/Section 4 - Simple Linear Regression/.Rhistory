# Data Preprocessing Template
# Importing the dataset
#Filling missing values
dataset = read.csv('Data.csv')
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
#Encoding data
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1,2,3))
dataset$Purchased = factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0,1))
#Splitting the training data into training set and test set
#install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split = TRUE)
test_set = subset(dataset, split = FALSE)
setwd("C:/Users/Francisco/Desktop/MACHINE_LEARNING_DATASETS/Machine Learning A-Z Template Folder/Part 1 - Data Preprocessing")
# Data Preprocessing Template
# Importing the dataset
#Filling missing values
dataset = read.csv('Data.csv')
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
#Encoding data
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1,2,3))
dataset$Purchased = factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0,1))
#Splitting the training data into training set and test set
#install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split = TRUE)
test_set = subset(dataset, split = FALSE)
test_set
training_set = scale(training_set)
test_set = scale(test_set)
View(training_set)
View(training_set)
training_set[, 2:3] = scale(training_set[,2:3])
test_set[, 2:3] = scale(test_set[,2:3])
View(test_set)
View(test_set)
View(training_set)
View(dataset)
View(dataset)
# Data Preprocessing Template
# Importing the dataset
#Filling missing values
dataset = read.csv('Data.csv')
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
#Encoding data
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1,2,3))
dataset$Purchased = factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0,1))
#Splitting the training data into training set and test set
#install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split = TRUE)
test_set = subset(dataset, split = FALSE)
#Feature Scaling
training_set[, 2:3] = scale(training_set[,2:3])
test_set[, 2:3] = scale(test_set[,2:3])
#Remember that a factor in R is not numeric. And thats why we must exclude these elements.
View(test_set)
View(test_set)
View(training_set)
View(training_set)
View(test_set)
View(test_set)
View(training_set)
View(training_set)
View(dataset)
View(dataset)
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split = TRUE)
test_set = subset(dataset, split = FALSE)
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split = TRUE)
test_set = subset(dataset, split = FALSE)
# Data Preprocessing Template
# Importing the dataset
#Filling missing values
dataset = read.csv('Data.csv')
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
#Encoding data
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1,2,3))
dataset$Purchased = factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0,1))
#Splitting the training data into training set and test set
#install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split = TRUE)
test_set = subset(dataset, split = FALSE)
#Feature Scaling
training_set[, 2:3] = scale(training_set[,2:3])
test_set[, 2:3] = scale(test_set[,2:3])
#Remember that a factor in R is not numeric. And thats why we must exclude these elements.
#Filling missing values
dataset = read.csv('Data.csv')
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
#Encoding data
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1,2,3))
dataset$Purchased = factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0,1))
View(dataset)
View(dataset)
#Splitting the training data into training set and test set
#install.packages("caTools")
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split = TRUE)
#Feature Scaling
training_set[, 2:3] = scale(training_set[, 2:3])
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split = TRUE)
test_set = subset(dataset, split = FALSE)
setwd("C:/Users/Francisco/Desktop/MACHINE_LEARNING_DATASETS/Machine Learning A-Z Template Folder/Part 1 - Data Preprocessing")
# Data preprocessing
# Importing the dataset
dataset = read.csv('Data.csv')
# Taking care of missing data
dataset$Age = ifelse(
is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age
)
dataset$Salary = ifelse(
is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary
)
# Encoding categorical data
dataset$Country = factor(
dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)
)
dataset$Purchased = factor(
dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0, 1)
)
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature scaling
training_set[, 2:3] = scale(training_set[, 2:3])
test_set[, 2:3] = scale(test_set[, 2:3])
View(test_set)
View(test_set)
setwd("C:/Users/Francisco/Desktop/MACHINE_LEARNING_DATASETS/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 4 - Simple Linear Regression")
# Data Preprocessing Template
# Importing the dataset
dataset = read.csv('Data.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
setwd("C:/Users/Francisco/Desktop/MACHINE_LEARNING_DATASETS/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 4 - Simple Linear Regression")
# Data Preprocessing Template
# Importing the dataset
dataset = read.csv('Data.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Data Preprocessing Template
# Importing the dataset
dataset = read.csv('Salary_Data.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
regressor = lm(formula = Salary - Years_Experience, data = training_set)
View(training_set)
View(training_set)
View(test_set)
View(test_set)
View(dataset)
View(dataset)
regressor = lm(formula = Salary - YearsExperience, data = training_set)
View(training_set)
View(training_set)
regressor = lm(formula = Salary ~ YearsExperience, data = training_set)
library("ggplot2", lib.loc="~/R/win-library/3.5")
library('ggplot2')
library(ggplot2)
detach("package:ggplot2", unload=TRUE)
library(ggplot2)
library(ggplot2)
ggplot() + geom_point(aes(x=training_set$YearsExperience),
y=training_set$Salary,
colour = 'red') +
geom_line(aes(x=training_set$YearsExperience),
y=predict(regressor, newdata=training_set),
color = 'blue')+
ggtitle('Salary vs Experince(Training Set)') +
xlab('Years of Experience') +
ylab('Salary')
# Data Preprocessing Template
# Importing the dataset
dataset = read.csv('Salary_Data.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
regressor = lm(formula = Salary ~ YearsExperience, data = training_set)
#Predicting the values for the test set.
y_pred = predict(regressor, newdata = test_set)
library(ggplot2)
ggplot() + geom_point(aes(x=training_set$YearsExperience,
y=training_set$Salary),
colour = 'red') +
geom_line(aes(x=training_set$YearsExperience,
y=predict(regressor, newdata=training_set)),
color = 'blue')+
ggtitle('Salary vs Experience(Training Set)') +
xlab('Years of Experience') +
ylab('Salary')
ggplot() + geom_point(aes(x=test_set$YearsExperience,
y=test_set$Salary),
colour = 'red') +
geom_line(aes(x=training_set$YearsExperience,
y=predict(regressor, newdata=training_set)),
color = 'blue')+
ggtitle('Salary vs Experience(Training Set)') +
xlab('Years of Experience') +
ylab('Salary')
library(ggplot2)
ggplot() + geom_point(aes(x=training_set$YearsExperience,
y=training_set$Salary),
colour = 'red') +
geom_line(aes(x=training_set$YearsExperience,
y=predict(regressor, newdata=training_set)),
color = 'blue')+
ggtitle('Salary vs Experience(Training Set)') +
xlab('Years of Experience') +
ylab('Salary')
ggplot() + geom_point(aes(x=test_set$YearsExperience,
y=test_set$Salary),
colour = 'red') +
geom_line(aes(x=training_set$YearsExperience,
y=predict(regressor, newdata=training_set)),
color = 'blue')+
ggtitle('Salary vs Experience(Training Set)') +
xlab('Years of Experience') +
ylab('Salary')
